name: Run DynamoRIO

on:
  push:

jobs:
  run-drmemory:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build pkg-config clang clang-format build-essential curl ccache git zsh
          sudo apt-get install -y libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev libx264-dev libcurl4-openssl-dev libmbedtls-dev libgl1-mesa-dev libjansson-dev libluajit-5.1-dev python3-dev libx11-dev libxcb-randr0-dev libxcb-shm0-dev libxcb-xinerama0-dev libxcb-composite0-dev libxcomposite-dev libxinerama-dev libxcb1-dev libx11-xcb-dev libxcb-xfixes0-dev swig libcmocka-dev libxss-dev libglvnd-dev libgles2-mesa libgles2-mesa-dev libwayland-dev libsrt-openssl-dev libpci-dev libpipewire-0.3-dev libqrcodegencpp-dev uthash-dev
          sudo apt-get install -y \
                 qt6-base-dev \
                 qt6-base-private-dev \
                 libqt6svg6-dev \
                 qt6-wayland \
                 qt6-image-formats-plugins
          sudo apt-get install -y \
                 libasound2-dev \
                 libfdk-aac-dev \
                 libfontconfig-dev \
                 libfreetype6-dev \
                 libjack-jackd2-dev \
                 libpulse-dev libsndio-dev \
                 libspeexdsp-dev \
                 libudev-dev \
                 libv4l-dev \
                 libva-dev \
                 libvlc-dev \
                 libvpl-dev \
                 libdrm-dev \
                 nlohmann-json3-dev \
                 libwebsocketpp-dev \
                 libasio-dev
          
      - name: Build repository 
        run: | 
          git clone --recursive https://github.com/obsproject/obs-studio.git .
          export CC=gcc && export CXX=g++ && export CFLAGS="-g -fno-inline -fno-omit-frame-pointer" && export LDFLAGS=""
          cmake -S . -B build -G Ninja \
            -DCEF_ROOT_DIR="../obs-build-dependencies/cef_binary_5060_linux_x86_64" \
            -DENABLE_PIPEWIRE=OFF \
            -DENABLE_AJA=0 \
                  -DENABLE_WEBRTC=0 \
            -DQT_VERSION=6 -DENABLE_BROWSER=OFF -DENABLE_NEW_MPEGTS_OUTPUT=OFF -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_NATIVE_NVENC=OFF 
          cmake --build build -t libobs
        continue-on-error: true 

      - name: Install Dr. Memory
        if: runner.os == 'Linux'
        run: | 
          sudo apt-get update
          sudo apt-get install -y libunwind8
          wget -P /tmp/ https://github.com/DynamoRIO/dynamorio/releases/download/release_10.0.0/DynamoRIO-Linux-10.0.0.tar.gz && tar -xzf /tmp/DynamoRIO-Linux-10.0.0.tar.gz -C /tmp/
           
      - name: Run DynamoRIO
        run: |
          export DYNAMORIO_HOME="/tmp/DynamoRIO-Linux-10.0.0"
          export GITHUB_PATH="$DYNAMORIO_HOME/bin64:$DYNAMORIO_HOME/tools/bin64:$GITHUB_PATH"
          export LD_LIBRARY_PATH="$DYNAMORIO_HOME/lib64:$LD_LIBRARY_PATH"
          #!/bin/bash
          set +e 

          echo "=========[DynamoRIO Service Started!]========="

          DIRECTORY=.

          is_executable() {
            local file="$1"
            if file "$file" | grep -q 'ELF 64-bit'; then
              return 0
            else
              return 1
            fi
          }

          run_with_dynrio_coverage() {
            local executable="$1"
            local log_dir="./logs_coverage"
            mkdir -p "$log_dir"
            $DYNAMORIO_HOME/bin64/drrun -t drcov -logdir "$log_dir" -dump_text -- "$executable"
            local exit_status=$?
            
            if [ $exit_status -eq 124 ]; then
              echo "Execution timed out after 45 seconds: $executable"
            fi

            for log_file in "$log_dir"/drcov.*.log; do
              $DYNAMORIO_HOME/tools/bin64/drcov2lcov -input "$log_file" -src_filter "$log_dir"
            done
          }

          find "$DIRECTORY" -type f -executable | while read -r file; do
            if is_executable "$file"; then
              run_with_dynrio_coverage "$file"
              echo ""
              echo ""
            fi
          done

          echo "=========[DynamoRIO service finished]========="
  
      - name: Upload Dr. Memory reports
        uses: actions/upload-artifact@v4
        with:
          name: drmemory-report-${{ github.event.repository.name }}-on-${{ matrix.os }}
          path: './logs_coverage/*'
