name: Run Valgrind

on:
  push:

jobs:
  run-valgrind:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2 
        with:
          ref: 14d2c80560206cab2d5c810d77a14d3a324d4ebd
          submodules: recursive

      - name: Install Dependencies 🛍️
        if: runner.os == 'Linux'
        shell: bash
        run: |
          : Install Dependencies 🛍️
          echo ::group::Install Dependencies
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          echo "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
          brew install --quiet zsh
          echo ::endgroup::
        
      - name: Run Ubuntu Build
        if: runner.os == 'Linux'
        shell: bash
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          echo "Run Ubuntu Build"
      
          build_args=(
            --config "${{ inputs.config }}"
            --target "ubuntu-${{ inputs.target }}"
          )
          if [[ -n "$RUNNER_DEBUG" ]]; then
            build_args+=(--debug)
          fi
      
          git fetch origin --no-tags --no-recurse-submodules -q
          .github/scripts/build-ubuntu "${build_args[@]}"
        
      - name: Install Valgrind
        if: runner.os == 'Linux'
        run: | 
          sudo apt-get update
          sudo apt-get install -y valgrind
      
      - name: Run Valgrind
        run: |
          #!/bin/bash
          set +e 

          echo "<----------------------Start Valgrind Service---------------------->"
          
          is_executable() {
            local file="$1"
            if file "$file" | grep -q 'ELF 64-bit'; then
              return 0
            else
              return 1
            fi
          }

          run_with_valgrind() {
            local executable="$1"
            local tool="$2"
            local tool_name="$3"
            local valgrind_options="--read-inline-info=yes --trace-children=yes -v -v"

            if [ "$tool" == "memcheck" ]; then
              valgrind_options+=" --leak-check=full --show-leak-kinds=all --track-origins=yes"
            fi

            timeout 60s valgrind --tool="$tool" $valgrind_options "$executable"
            local exit_status=$?

            if [ $exit_status -eq 124 ]; then
              return
            elif [ $exit_status -ne 0 ]; then
              ((success += 1))
            else
              ((fails += 1))
            fi
          }

          tools=(
            "memcheck Memcheck"
            "cachegrind Cachegrind"
            "callgrind Callgrind"
            "helgrind Helgrind"
            "drd DRD"
            "massif Massif"
            "dhat DHAT"
            "lackey Lackey"
            "none None"
            "exp-bbv exp-bbv"
          )

          find . -type f -executable | while read -r file; do
            if is_executable "$file"; then
              for tool_info in "${tools[@]}"; do
                tool=(${tool_info})
                echo "" 
                echo "" 
                echo ""
                echo "========Valgrind tool: ${tool[1]}========"
                run_with_valgrind "$file" "${tool[0]}" "${tool[1]}"
              done
            fi
          done
